<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mongoTemplate 使用管道聚合实现 根据某个条件去重</title>
      <link href="/2024/10/15/blog004-1/"/>
      <url>/2024/10/15/blog004-1/</url>
      
        <content type="html"><![CDATA[<p>在日常业务中可能会遇到根据数据库某个字段进行去重，我们可以使用<em><strong>mongotemplate.findDistinct</strong></em>方法。但是使用这个方法不太好匹配其他例如 排序、分页、获取总数等业务。为了能更好的实现业务我们可以使用mongo 的 管道聚合来实现。下面直接展示代码：</p><p><strong>条件+去重+排序+分页</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">group</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">//页码</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;  <span class="hljs-comment">//页长</span><br><br>        <span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> Criteria.where(<span class="hljs-string">&quot;num&quot;</span>).lte(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">Aggregation</span> <span class="hljs-variable">aggregation</span> <span class="hljs-operator">=</span> Aggregation.newAggregation(<br>                Aggregation.match(criteria), <span class="hljs-comment">//过滤条件</span><br>                Aggregation.group(<span class="hljs-string">&quot;age&quot;</span>) <span class="hljs-comment">// 根据指定字段去重</span><br>                        .first(<span class="hljs-string">&quot;$$ROOT&quot;</span>).as(<span class="hljs-string">&quot;document&quot;</span>), <span class="hljs-comment">// 保留整个文档</span><br>                Aggregation.replaceRoot(<span class="hljs-string">&quot;document&quot;</span>), <span class="hljs-comment">// 将保存的整个文档对象作为输出文档</span><br>                Aggregation.sort(Sort.by(Sort.Direction.ASC, <span class="hljs-string">&quot;num&quot;</span>)), <span class="hljs-comment">// 根据指定字段排序</span><br>                Aggregation.skip((page - <span class="hljs-number">1</span>) * size), <span class="hljs-comment">// 跳过指定的页数</span><br>                Aggregation.limit(size)<br>        );<br>        AggregationResults&lt;User&gt; results = mongoTemplate.aggregate(aggregation, <span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        List&lt;User&gt; userList = results.getMappedResults();<br>        <span class="hljs-type">Aggregation</span> <span class="hljs-variable">countAgg</span> <span class="hljs-operator">=</span> Aggregation.newAggregation(<br>                Aggregation.match(criteria),     <span class="hljs-comment">// 过滤条件</span><br>                Aggregation.group(<span class="hljs-string">&quot;age&quot;</span>),  <span class="hljs-comment">// 根据指定字段去重</span><br>                Aggregation.count().as(<span class="hljs-string">&quot;total&quot;</span>) <span class="hljs-comment">// 计算去重后的总数</span><br>        );<br><br>        AggregationResults&lt;org.bson.Document&gt; countResults = mongoTemplate.aggregate(countAgg, <span class="hljs-string">&quot;user&quot;</span>, org.bson.Document.class);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (!countResults.getMappedResults().isEmpty()) &#123;<br>            total = countResults.getMappedResults().get(<span class="hljs-number">0</span>).getInteger(<span class="hljs-string">&quot;total&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;查询出来的数据&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;当前为第&quot;</span> + page + <span class="hljs-string">&quot;页&quot;</span>);<br>        userList.forEach(System.out::println);<br>        System.out.println(<span class="hljs-string">&quot;总数为：&quot;</span> + total);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer num;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数据库数据</strong><br><img src="/images/blog004/img001.png"><br><strong>执行结果</strong><br><img src="/images/blog004/img002.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【mongo事务】在spring boot 中，整合mongo和mysql的事务。</title>
      <link href="/2024/06/05/blog003-1/"/>
      <url>/2024/06/05/blog003-1/</url>
      
        <content type="html"><![CDATA[<p>在spring boot的声明式事务中，一次只能指定一个TransactionManager，所以在默认情况下一个方法中，只能支持mysql或mongo其中一个的事务。但是在日常业务中，很多时候一段业务内既有mongo也有mysql，这时就需要mysql和mongo的事务同时支持，不然可能就会出现mysql和mongo数据不一致的情况。</p><h1 id="ChainedTransactionManager"><a href="#ChainedTransactionManager" class="headerlink" title="ChainedTransactionManager"></a>ChainedTransactionManager</h1><p>ChainedTransactionManager是Spring框架中的一个事务管理器实现，它可以将多个事务管理器组合在一起形成一个链式的事务管理器。但是值得注意的是，只是链式反应事务管理器，而不是分布式事务(XA 之类的)。所以在某些复杂的情况下依旧不能做到事务的一致性。所以ChainedTransactionManager仅支持简单的事务场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 事务管理</span><br><span class="hljs-comment"> * 整合mongo  mysql 事务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Primary</span> <span class="hljs-comment">//mysql事务管理器  默认事务管理器</span><br>    <span class="hljs-keyword">public</span> JdbcTransactionManager <span class="hljs-title function_">mysqlTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTransactionManager</span>(dataSource);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;mongoTransactionManager&quot;)</span><br>    <span class="hljs-keyword">public</span> MongoTransactionManager <span class="hljs-title function_">mongoTransactionManager</span><span class="hljs-params">(MongoDatabaseFactory factory)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoTransactionManager</span>(factory);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;chainedTransactionManager&quot;)</span><br>    <span class="hljs-keyword">public</span> ChainedTransactionManager <span class="hljs-title function_">chainedTransactionManager</span><span class="hljs-params">(JdbcTransactionManager jdbcTransactionManager, <span class="hljs-meta">@Qualifier(&quot;mongoTransactionManager&quot;)</span> MongoTransactionManager mongoTransactionManager)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransactionManager</span>(jdbcTransactionManager,mongoTransactionManager);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里配置3个TransactionManager，后续可以根据具体业务在@Transactional指定使用的TransactionManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional()</span> <span class="hljs-comment">//这里默认的是mysql的TransactionManager</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;&#125;<br><span class="hljs-meta">@Transactional(value = &quot;mongoTransactionManager&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;&#125;<br><span class="hljs-meta">@Transactional(value = &quot;chainedTransactionManager&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>但是spring 官方在2020年11月已经开始将ChainedTransactionManager标记为@Deprecated，具体原因可看<a href="https://github.com/spring-projects/spring-data-commons/issues/2232">https://github.com/spring-projects/spring-data-commons/issues/2232</a></p><p>虽然已经废弃，但是能支持简单情况事务处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose 搭建mongo多副本</title>
      <link href="/2024/06/05/blog002/"/>
      <url>/2024/06/05/blog002/</url>
      
        <content type="html"><![CDATA[<p>MongoDB副本集（Replica Set）是有自动故障恢复功能的主从集群，有一个Primary节点和一个或者多个Secondary节点组成。副本集没有固定的主节点，当主节点发生故障时，整个集群会选举一个主节点 为系统提供服务以保证系统的高可用。</p><p>副本集拥有三种节点:<em><strong>主节点、从节点、仲裁节点</strong></em><br>1.<strong>主节点</strong> 负责处理客户端请求,读、写数据。<br>2.<strong>从节点</strong> 从主节点中复制数据，并可以接收读请求。在主节点故障时可通过投票选举出新的主节点。<br>3.<strong>仲裁节点</strong> 不持有数据副本，只参与投票过程，决定哪个节点成为主节点。</p><p><em><strong>本文使用mongo5.0.8作为样例</strong></em></p><h1 id="1-docker-compose-yaml"><a href="#1-docker-compose-yaml" class="headerlink" title="1.docker-compose.yaml"></a>1.docker-compose.yaml</h1><p>这里先直接给出单个mongo 的docker-compose.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.0&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mongo1:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">mongo1</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:5.0.8</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongodb1</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">app</span> <span class="hljs-string">--bind_ip_all</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/data/mongodb/keyFile</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">&#x27;password&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">27020</span><span class="hljs-string">:27017</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data1:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./keyFile:/data/mongodb/keyFile</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bridge_network</span><br>  <span class="hljs-attr">mongo2:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">mongo2</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:5.0.8</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongodb2</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">app</span> <span class="hljs-string">--bind_ip_all</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/data/mongodb/keyFile</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">&#x27;password&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">27018</span><span class="hljs-string">:27017</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data2:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./keyFile:/data/mongodb/keyFile</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bridge_network</span><br>  <span class="hljs-attr">mongo3:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">mongo3</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:5.0.8</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongodb3</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">app</span> <span class="hljs-string">--bind_ip_all</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/data/mongodb/keyFile</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">&#x27;password&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">27019</span><span class="hljs-string">:27017</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data3:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./keyFile:/data/mongodb/keyFile</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bridge_network</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">bridge_network:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure><p>这里可以选择在一台机器上启动3个容器，也可以在不同的机器上启动。本例用上述文件分别在IP为10.0.1.11(主)、10.0.1.31(从)、10.0.1.32(从)三台机器上启动。</p><p>在10.0.1.11执行<code>docker compose up -d mongo1</code><br>在10.0.1.31执行<code>docker compose up -d mongo2</code><br>在10.0.1.32执行<code>docker compose up -d mongo3</code></p><p>这里 <code>docker compose up -d</code> 后的 mongo1、mongo2、mongo3是指只启动yaml文件中的一个服务。如果将yaml文件拆分成不同的文件分别在对应的机器里启动就不需要在命令后面加服务名称了。</p><p><strong>需要注意</strong>：<br>组成副本的每一台机器的keyFile文件必须一样！！！mongodb实例只有拥有正确的keyfile才可以加入副本集。keyFile文件的具体操作方法可以参考<a href="/2022/10/17/blog001/" title="【mongo事务】使用docker-compose启动mongo,‘单副本模式‘实现支持事务">【mongo事务】使用docker-compose启动mongo,‘单副本模式‘实现支持事务</a></p><h1 id="2-容器启动后"><a href="#2-容器启动后" class="headerlink" title="2.容器启动后"></a>2.容器启动后</h1><p>在容器启动后，我们使用docker exec 命令进入作为主节点的容器,进入mongo shell</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">mongo -u <span class="hljs-literal">admin</span> --authenticationDatabase <span class="hljs-literal">admin</span><br></code></pre></td></tr></table></figure><p>初始化mongo 副本集</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rs.initiate(&#123;<br>  _id: <span class="hljs-string">&quot;app&quot;</span>,<br>  members: [<br>    &#123; <span class="hljs-type">_id</span>: <span class="hljs-number">0</span>, <span class="hljs-type">host</span>: <span class="hljs-string">&quot;10.0.1.11:27020&quot;</span> &#125;,<br>    &#123; <span class="hljs-type">_id</span>: <span class="hljs-number">1</span>, <span class="hljs-type">host</span>: <span class="hljs-string">&quot;10.0.1.31:27018&quot;</span> &#125;,<br>    &#123; <span class="hljs-type">_id</span>: <span class="hljs-number">2</span>, <span class="hljs-type">host</span>: <span class="hljs-string">&quot;10.0.1.32:27019&quot;</span> &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意，当初我在初始化时，误以为可以直接使用rs.initiate()无参的初始化方法，然后再依次使用rs.add(‘ip:port’)将剩余的节点加入副本集。但是这是错误的，因为在初始化时，如果使用无参的初始化方法，mongo会直接获取宿主机(<em>这时对于mongo来说宿主机是docker容器</em>)的hostname+端口组成mongo的host并写入配置，但是由于mongo的宿主机其实是容器，所以会获取到容器的hostname以及mongo在容器里的端口。<br><img src="/images/blog002/img001.png"><br>显然这个当多个不同机器的mongo副本相互通信时，这个host是无效的。</p><p>所以在初始化时最好直接指定好具体的机器。</p><p><img src="/images/blog002/img002.png"><br>当初始化完成以后可以使用<code>rs.status()</code>查看副本集状态<br>截取部分内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-string">&quot;members&quot;</span> : [<br>&#123;<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;10.0.1.11:27020&quot;</span>,<br><span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;PRIMARY&quot;</span>,<br><span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">2299</span>,<br><span class="hljs-string">&quot;optime&quot;</span> : &#123;<br><span class="hljs-string">&quot;ts&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1717560117</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">1</span>)<br>&#125;,<br><span class="hljs-string">&quot;optimeDate&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57Z&quot;</span>),<br><span class="hljs-string">&quot;lastAppliedWallTime&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57.808Z&quot;</span>),<br><span class="hljs-string">&quot;lastDurableWallTime&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57.808Z&quot;</span>),<br><span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;syncSourceId&quot;</span> : -<span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;electionTime&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1717559887</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;electionDate&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T03:58:07Z&quot;</span>),<br><span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;configTerm&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;self&quot;</span> : <span class="hljs-type">true</span>,<br><span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;10.0.1.31:27018&quot;</span>,<br><span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br><span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">249</span>,<br><span class="hljs-string">&quot;optime&quot;</span> : &#123;<br><span class="hljs-string">&quot;ts&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1717560117</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">1</span>)<br>&#125;,<br><span class="hljs-string">&quot;optimeDurable&quot;</span> : &#123;<br><span class="hljs-string">&quot;ts&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1717560117</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">1</span>)<br>&#125;,<br><span class="hljs-string">&quot;optimeDate&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57Z&quot;</span>),<br><span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57Z&quot;</span>),<br><span class="hljs-string">&quot;lastAppliedWallTime&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57.808Z&quot;</span>),<br><span class="hljs-string">&quot;lastDurableWallTime&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57.808Z&quot;</span>),<br><span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:02:05.988Z&quot;</span>),<br><span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:02:05.581Z&quot;</span>),<br><span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;10.0.1.11:27020&quot;</span>,<br><span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;configTerm&quot;</span> : <span class="hljs-number">1</span><br>&#125;,<br>&#123;<br><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;10.0.1.32:27019&quot;</span>,<br><span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span>,<br><span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">249</span>,<br><span class="hljs-string">&quot;optime&quot;</span> : &#123;<br><span class="hljs-string">&quot;ts&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1717560117</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">1</span>)<br>&#125;,<br><span class="hljs-string">&quot;optimeDurable&quot;</span> : &#123;<br><span class="hljs-string">&quot;ts&quot;</span> : <span class="hljs-type">Timestamp</span>(<span class="hljs-number">1717560117</span>, <span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;t&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">1</span>)<br>&#125;,<br><span class="hljs-string">&quot;optimeDate&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57Z&quot;</span>),<br><span class="hljs-string">&quot;optimeDurableDate&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57Z&quot;</span>),<br><span class="hljs-string">&quot;lastAppliedWallTime&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57.808Z&quot;</span>),<br><span class="hljs-string">&quot;lastDurableWallTime&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:01:57.808Z&quot;</span>),<br><span class="hljs-string">&quot;lastHeartbeat&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:02:05.988Z&quot;</span>),<br><span class="hljs-string">&quot;lastHeartbeatRecv&quot;</span> : <span class="hljs-type">ISODate</span>(<span class="hljs-string">&quot;2024-06-05T04:02:05.629Z&quot;</span>),<br><span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-type">NumberLong</span>(<span class="hljs-number">1</span>),<br><span class="hljs-string">&quot;lastHeartbeatMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;syncSourceHost&quot;</span> : <span class="hljs-string">&quot;10.0.1.11:27020&quot;</span>,<br><span class="hljs-string">&quot;syncSourceId&quot;</span> : <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;infoMessage&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;configVersion&quot;</span> : <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;configTerm&quot;</span> : <span class="hljs-number">1</span><br>&#125;<br>],<br></code></pre></td></tr></table></figure><p><img src="/images/blog002/img003.png"><br><img src="/images/blog002/img004.png"><br>这里可以看到执行初始化的机器为主节点，剩下的为从节点</p><p>关于stateStr字段的各个含义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">STARTUP：成员正在启动。<br>PRIMARY：成员是主节点。<br>SECONDARY：成员是次节点。<br>RECOVERING：成员正在恢复。<br>ARBITER：成员是仲裁节点。<br>DOWN：成员无法与大多数节点通信。<br>UNKNOWN：成员的状态未知。<br>ROLLBACK：成员正在进行回滚操作。<br>REMOVED：成员已经被副本集移除。<br></code></pre></td></tr></table></figure><p>最后如果有后续需要加入的新节点可以使用 rs.add(‘ip:port’)加入。如果需要加入<em><strong>仲裁节点(不推荐)</strong></em><br>可以使用rs.add(‘ip:port’，true)加入<br><img src="/images/blog002/img005.png"></p><p><em><strong>关于节点的数量</strong></em><br>mongodb官方说当节点超过2个时，推荐副本集成员为奇数个成员，而不使用<em><strong>仲裁节点</strong></em>。所以在实际运用中尽可能的保证奇数个节点而不使用<em><strong>仲裁节点</strong></em>。如果迫不得已正常主从节点总数为偶数，这时<em><strong>仲裁节点</strong></em>就可以加入副本集（<em><strong>仲裁节点</strong></em>不参与存储等业务，只参与投票，所以<em><strong>仲裁节点</strong></em>对于性能的要求很小，加一个<em><strong>仲裁节点</strong></em>的难度不会很大），这样拥有投票权的节点总数又为奇数了。<br>具体为什么需要奇数个节点，这需要投票选举的算法以及实际部署的情况来解释（脑裂问题）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> linux </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【mongo事务】使用docker-compose启动mongo,‘单副本模式‘实现支持事务</title>
      <link href="/2022/10/17/blog001/"/>
      <url>/2022/10/17/blog001/</url>
      
        <content type="html"><![CDATA[<p><strong>想要mongo支持事务的首要条件是mongo版本4.x 以上，且为复制集模式。由于很多时候使用mongo都不需要部署多副本，但是想支持事务，所以可以使用‘单副本模式’，既能保证mongo实例只有一个，又是复制集模式。<br>本文使用mongo5.0.8作为样例。</strong></p><p>本文只是日常遇到问题的小记，如有错误，欢迎指出。</p><h4 id="首先给出docker-compose-yml"><a href="#首先给出docker-compose-yml" class="headerlink" title="首先给出docker-compose.yml"></a>首先给出docker-compose.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.0&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mongo:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:5.0.8</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongodb</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">rs0</span> <span class="hljs-string">--bind_ip_all</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/data/mongodb/keyFile</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>      <span class="hljs-comment">#用户名密码</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">&#x27;password&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">27017</span><span class="hljs-string">:27017</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mongodb/data:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mongodb/keyFile:/data/mongodb/keyFile</span><br></code></pre></td></tr></table></figure><h4 id="准备keyFile"><a href="#准备keyFile" class="headerlink" title="准备keyFile"></a>准备keyFile</h4><p>本人粗略测试在4.x版本不需要使用keyFile,但是在5.x版本是必须要KeyFile的，不然会报 “BadValue: security.keyFile is required when authorization is enabled with replica sets”<br><img src="/images/blog001/img001.png" alt="mongo启动日志"></p><h5 id="生成keyFile"><a href="#生成keyFile" class="headerlink" title="生成keyFile"></a>生成keyFile</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">openssl rand <span class="hljs-literal">-base64</span> <span class="hljs-number">128</span> &gt; ./mongodb/keyFile<br></code></pre></td></tr></table></figure><p>其中 .&#x2F;mongodb&#x2F;keyFile 是指定生成文件的名字以及在哪一个文件夹下</p><h5 id="设置权限以及所属用户"><a href="#设置权限以及所属用户" class="headerlink" title="设置权限以及所属用户"></a>设置权限以及所属用户</h5><p>keyFile文件的权限必须为600,如果权限太大，启动时会报“error opening file: &#x2F;data&#x2F;mongodb&#x2F;keyFile: bad file”<br><img src="/images/blog001/img002.png"><br>当权限改为600以后还需要把keyFile文件的所属用户和用户组改为mongodb不然在启动时会报”permissions on &#x2F;data&#x2F;mongodb&#x2F;keyFile are too open”<br><img src="/images/blog001/img003.png"><br>由于使用容器启动所以需要把keyFile文件的所属用户和用户组 改为999，这样容器会自动把keyFile文件的所属用户和用户组改为mongodb。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sudo chmod <span class="hljs-number">600</span> keyFile<br>sudo chown <span class="hljs-number">999</span>:<span class="hljs-number">999</span> keyFile<br></code></pre></td></tr></table></figure><p>容器外<br><img src="/images/blog001/img004.png"><br>容器里</p><p><img src="/images/blog001/img005.png"><br>当keyFile文件准备好以后，就可以根据上面的docker-compose.yml启动容器。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>容器启动后这时mongo还不能使用，还需要进入容器内初始化复制集。<br>进入容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker exec <span class="hljs-literal">-it</span> mongodb /bin/bash<br></code></pre></td></tr></table></figure><p>用刚刚设置的用户名密码进入mongo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mongo <span class="hljs-literal">-u</span> admin <span class="hljs-literal">--authenticationDatabase</span> admin<br></code></pre></td></tr></table></figure><p><img src="/images/blog001/img006.png"></p><p>执行初始化</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rs.initiate()<br></code></pre></td></tr></table></figure><p>显示一下就说明成功了<br><img src="/images/blog001/img007.png"><br>到这mongo就算是启动完成了。</p><h4 id="spring-boot项目配置"><a href="#spring-boot项目配置" class="headerlink" title="spring boot项目配置"></a>spring boot项目配置</h4><p>要想实现事务还需要在项目中进行配置</p><p>spring boot 版本： 2.1.6.RELEASE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MongoTransactionConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    MongoTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(MongoDbFactory factory)</span>&#123;<br>        log.warn(<span class="hljs-string">&quot;开启mongo事务&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoTransactionManager</span>(factory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在spring boot高版本中MongoDbFactory被弃用需要换成MongoDatabaseFactory</p><p>spring boot 版本：2.6.1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MongoTransactionConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    MongoTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(MongoDatabaseFactory factory)</span>&#123;<br>        log.warn(<span class="hljs-string">&quot;开启mongo事务&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoTransactionManager</span>(factory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加配置类以后只需要在方法上加入@Transactional注解就可以实现mongo事务了。</p><hr><p><strong>！！！新增！！！</strong><br>很多时候我们会保留挂载出来的数据，重新构建容器，由于docker在每次构建新容器时都会为容器随机分配一个hostname。但因为我们还是使用上一个容器挂载出来的数据，这就导致mongo副本集配置的hostname还是上一个容器，这就导致新启动的mongo不能用。因此我们只需要改变mongo副本集配置的hostname，就能解决这个问题</p><p>当我们启动mongo后直接连接会报这个错。<br><img src="/images/blog001/img008.png"></p><p>我们首先进入容器，查看当前容器的hostname<br><img src="/images/blog001/img009.png"><br>使用上面提到的方式，使用admin账号登陆mongo，查看config</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rs.config()<br></code></pre></td></tr></table></figure><p><img src="/images/blog001/img010.png"><br>正如上述所说config里的hostname与当前容器的不一样</p><h4 id="方法1：更改hostname"><a href="#方法1：更改hostname" class="headerlink" title="方法1：更改hostname"></a>方法1：更改hostname</h4><p>1.获取副本集配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">config=rs.conf()<br></code></pre></td></tr></table></figure><p>2.可以根据上面配置json的格式可以知道hostname的位置，从而对他进行重新赋值（将host改为当前容器的host）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">config.members[<span class="hljs-number">0</span>].host=<span class="hljs-string">&quot;c3e9261f8a04:27017&quot;</span><br></code></pre></td></tr></table></figure><p>3.最后更新config</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">rs.reconfig(config, &#123;force : true&#125;)<br></code></pre></td></tr></table></figure><p><img src="/images/blog001/img011.png"><br>改完以后mongo就能正常启动了</p><h4 id="方法2：在yaml中指定hostname"><a href="#方法2：在yaml中指定hostname" class="headerlink" title="方法2：在yaml中指定hostname"></a>方法2：在yaml中指定hostname</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.0&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mongo:</span><br>  <span class="hljs-attr">hostname:</span> <span class="hljs-string">mongo501</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:5.0.8</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongodb</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">rs0</span> <span class="hljs-string">--bind_ip_all</span> <span class="hljs-string">--keyFile</span> <span class="hljs-string">/data/mongodb/keyFile</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>      <span class="hljs-comment">#用户名密码</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">&#x27;password&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">27017</span><span class="hljs-string">:27017</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mongodb/data:/data/db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mongodb/keyFile:/data/mongodb/keyFile</span><br></code></pre></td></tr></table></figure><p>这样的话每次新建的容器的hostname都是同一个了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> linux </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
